public class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int len1=nums1.length;
        int len2=nums2.length;
        if(len1==0&&len2==0){
            return 0;
        }
        int len = len1+len2;
        boolean isTwo=len%2==0;
        double res;
        if(isTwo){
            res=(findKthNumber(nums1,0,nums2,0, len/2)+findKthNumber(nums1,0,nums2,0, len/2+1))/2.0;
        }else{
            res=findKthNumber(nums1,0,nums2,0, len/2+1);
        }
        return res;
    }
    public int findKthNumber(int[] nums1, int start1, int[] nums2, int start2, int k){
        int len1= nums1.length;
        int len2= nums2.length;
        if(len1==0&&start2+k-1<len2){
            return nums2[start2+k-1];
        }
        if(len2==0&&start1+k-1<len1){
            return nums1[start1+k-1];
        }
        //care about boundry
        if(k==1)return Math.min(start1<len1?nums1[start1]:Integer.MAX_VALUE, start2<len2?nums2[start2]:Integer.MAX_VALUE);
        int m1=start1+k/2-1<len1?nums1[start1+k/2-1]:Integer.MAX_VALUE;
        int m2=start2+k/2-1<len2?nums2[start2+k/2-1]:Integer.MAX_VALUE;
        if(m1>=m2){
            return findKthNumber(nums1, start1, nums2, start2+k/2, k-k/2);
        }else{
            return findKthNumber(nums1, start1+k/2, nums2, start2, k-k/2);
        }
    }
}
