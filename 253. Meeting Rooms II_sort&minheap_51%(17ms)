/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
public class Solution {
    public Comparator<Interval> intervalComparator = new Comparator<Interval>(){
        public int compare(Interval i1, Interval i2){
            return i1.start-i2.start;
        }
    };
    public Comparator<Interval> heapComparator = new Comparator<Interval>(){
        public int compare(Interval i1, Interval i2){
            return i1.end-i2.end;
        }
    };
    public int minMeetingRooms(Interval[] intervals) {
        int len = intervals.length;
        if(len==0)return 0;
        Arrays.sort(intervals, intervalComparator);
        PriorityQueue<Interval> minHeap = new PriorityQueue<Interval>(heapComparator);
        minHeap.offer(intervals[0]);
        for(int i=1; i<len; i++){
            Interval isUsing = minHeap.poll();
            if(isUsing.end<=intervals[i].start){
                isUsing.end=intervals[i].end;
            }else{
                minHeap.offer(intervals[i]);
            }
            minHeap.offer(isUsing);
        }
        return minHeap.size();
    }
}
