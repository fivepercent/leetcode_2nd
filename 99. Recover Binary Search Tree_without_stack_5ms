/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public void recoverTree(TreeNode root) {
        TreeNode p1=null;
        TreeNode p2=null;
        TreeNode last=new TreeNode(Integer.MIN_VALUE);
        
        while(root!=null){
            if(root.left==null){
                if(p1==null&&root.val<=last.val){
                    p1=last;
                }
                if(p1!=null&&root.val<=last.val){
                    p2=root;
                }
                last=root;
                root=root.right;
            }else{
                TreeNode pre = root.left;
                while(pre.right!=null&&pre.right!=root){
                    pre=pre.right;
                }
                if(pre.right==null){
                    pre.right=root;
                    root=root.left;
                }
                if(pre.right==root){
                    pre.right=null;
                    if(p1==null&&root.val<=last.val){
                        p1=last;
                    }
                    if(p1!=null&&root.val<=last.val){
                        p2=root;
                    }
                    last=root;
                    root=root.right;
                }
            }
        }
        int temp = p1.val;
        p1.val=p2.val;
        p2.val=temp;
    }
}
