public class Solution {
    public List<String> wordBreak(String s, Set<String> wordDict) {
        int len = s.length();
        boolean[][] isWord=new boolean[len][len];
        for(int i=0; i<len; i++){
            for(int j=i; j<len; j++){
                isWord[i][j]=wordDict.contains(s.substring(i, j+1));
            }
        }
        boolean[] possible = new boolean[len+1];
        possible[len]=true;
        for(int i=len-1;i>=0; i--){
            for(int j=i; j<len; j++){
                if(isWord[i][j]&&possible[j+1]){
                    possible[i]=true;
                    break;
                }
            }
        }
        List<String> res=new ArrayList<String>();
        wordBreakHelper(s, 0, isWord, possible, res, "");
        return res;
    }
    public void wordBreakHelper(String s, int index, boolean[][] isWord, boolean[] possible, List<String> res, String sentence){
        int len=s.length();
        if(index==len){
            sentence=sentence.substring(0, sentence.length()-1);
            res.add(sentence);
            return;
        }
        if(!possible[index])return;
        for(int i=index; i<len; i++){
            if(isWord[index][i]){
                String cur = s.substring(index, i+1);
                wordBreakHelper(s, i+1, isWord, possible, res, sentence+cur+" ");
            }
        }
    }
}
