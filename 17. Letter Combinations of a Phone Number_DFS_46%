public class Solution {
    public List<String> letterCombinations(String digits) {
        List<String> res = new ArrayList<String>();
        if(digits.length()==0)return res;
        letterCombinationsHelper(digits, res, "");
        return res;
    }
    public void letterCombinationsHelper(String digits, List<String> res, String combination){
        int len=digits.length();
        int curlen=combination.length();
        if(curlen==len){
            res.add(combination);
            return;
        }
        char current=digits.charAt(curlen);
        char[] csets= getCharaterSet(current);
        for(int i=0; i<csets.length; i++){
            letterCombinationsHelper(digits, res, combination+csets[i]);
        }
    }
    public char[] getCharaterSet(char digit){
        switch(digit){
            case '2': return new char[]{'a', 'b', 'c'};
            case '3': return new char[]{'d', 'e', 'f'};
            case '4': return new char[]{'g', 'h', 'i'};
            case '5': return new char[]{'j', 'k', 'l'};
            case '6': return new char[]{'m', 'n', 'o'};
            case '7': return new char[]{'p', 'q', 'r', 's'};
            case '8': return new char[]{'t', 'u', 'v'};
            case '9': return new char[]{'w', 'x', 'y', 'z'};
            default: return new char[]{};
        }
    }
}
