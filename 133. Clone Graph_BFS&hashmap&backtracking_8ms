/**
 * Definition for undirected graph.
 * class UndirectedGraphNode {
 *     int label;
 *     List<UndirectedGraphNode> neighbors;
 *     UndirectedGraphNode(int x) { label = x; neighbors = new ArrayList<UndirectedGraphNode>(); }
 * };
 */
public class Solution {
    public UndirectedGraphNode cloneGraph(UndirectedGraphNode node) {
        if(node==null)return null;
        ArrayList<UndirectedGraphNode> nodes = new ArrayList<UndirectedGraphNode>();
        HashMap<UndirectedGraphNode, UndirectedGraphNode> map =new HashMap<UndirectedGraphNode, UndirectedGraphNode>();
        nodes.add(node);
        map.put(node, new UndirectedGraphNode(node.label));
        int start=0;
        while(start<nodes.size()){
            UndirectedGraphNode cur = nodes.get(start++);
            List<UndirectedGraphNode> neighbor_list = cur.neighbors;
            for(int i=0; i<neighbor_list.size(); i++){
                UndirectedGraphNode neighbor = neighbor_list.get(i);
                if(!map.containsKey(neighbor)){
                    nodes.add(neighbor);
                    map.put(neighbor, new UndirectedGraphNode(neighbor.label));
                }
            }
        }
        for(int i=0; i<nodes.size(); i++){
            UndirectedGraphNode cur = nodes.get(i);
            UndirectedGraphNode copied = map.get(cur);
            for(int j=0; j<cur.neighbors.size(); j++){
                copied.neighbors.add(map.get(cur.neighbors.get(j)));
            }
        }
        return map.get(node);
    }
}
