public class Solution {
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        int len =candidates.length;
        if(len==0)return res;
        List<Integer> combination = new ArrayList<Integer>();
        Arrays.sort(candidates);
        combinationSum2Helper(candidates, 0, target, combination, res);
        return res;
    }
    public void combinationSum2Helper(int[] candidates, int index, int target, List<Integer> combination, List<List<Integer>> res){
        if(target<0)return;
        if(target==0){
            List<Integer> list=new ArrayList<Integer>(combination);
            res.add(list);
        }
        //don't need a table
        int pre=-1;
        for(int i=index; i<candidates.length; i++){
            //break the loop if candidates[i] is larger than target
            if(candidates[i]>target)return;
            if(candidates[i]==pre)continue;
            combination.add(candidates[i]);
            combinationSum2Helper(candidates, i+1, target-candidates[i], combination, res);
            combination.remove(combination.size()-1);
            pre=candidates[i];
        }
    }
}
