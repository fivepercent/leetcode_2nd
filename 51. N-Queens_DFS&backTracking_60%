public class Solution {
    public List<List<String>> solveNQueens(int n) {
        List<List<String>> res = new ArrayList<List<String>>();
        if(n<=0)return res;
        sovleNQueensHelper(n, 0, res, new ArrayList<Integer>(), new boolean[n], new boolean[2*n], new boolean[2*n]);
        return res;
    }
    public void sovleNQueensHelper(int n, int row, List<List<String>> res, List<Integer> solution, boolean[] colCheck, boolean[] diag1Check, boolean[] diag2Check){
       // System.out.println(row);
        if(row==n){
            List<String> list=generateSolution(solution);
            res.add(list);
        }
        for(int i=0; i<n; i++){
            int i1=row+i;
            int i2=n-1+row-i;
            if(!(colCheck[i]||diag1Check[i1]||diag2Check[i2])){
                solution.add(i);
                colCheck[i]=true;
                diag1Check[i1]=true;
                diag2Check[i2]=true;
                sovleNQueensHelper(n, row+1, res, solution, colCheck, diag1Check, diag2Check);
                solution.remove(solution.size()-1);
                colCheck[i]=false;
                diag1Check[i1]=false;
                diag2Check[i2]=false;
            }
        }
    }
    
    public List<String> generateSolution(List<Integer> solution){
        List<String> res = new ArrayList<String>();
        int size=solution.size();
        for(int i=0; i<size; i++){
            int position = solution.get(i);
            StringBuilder sb = new StringBuilder();
            for(int j=0; j<size; j++){
                if(j==position){
                    sb.append('Q');
                }else{
                    sb.append('.');
                }
            }
            res.add(sb.toString());
        }
        return res;
    }
}
