public class Solution {
    public int maximumGap(int[] nums) {
        int len=nums.length;
        if(len<2)return 0;
        int max=0;
        for(int i=0; i<len; i++){
            max=max<nums[i]?nums[i]:max;
        }
        int bits=0;
        while(max!=0){
            bits++;
            max/=10;
        }
        int[][] cache = new int[10][len];
        int[] orders = new int[10];
        int shift=1;
        for(int i=0; i<bits; i++){
            for(int j=0; j<len; j++){
                int cur=(nums[j]/shift)%10;
              //  System.out.println(i+": "+(nums[j]/shift)+": "+cur);
                cache[cur][orders[cur]]=nums[j];
                orders[cur]++;
            }
            int index=0;
            for(int j=0; j<10; j++){
                for(int m=0; m<orders[j]; m++){
                    nums[index++]=cache[j][m];
                }
                orders[j]=0;
            }
            shift*=10;
          //  System.out.println(cache[0][0]);
        }
        int max_gap=0;
        for(int i=1; i<len; i++){
           // System.out.println(nums[i]-nums[i-1]);
            max_gap=nums[i]-nums[i-1]>max_gap?nums[i]-nums[i-1]:max_gap;
        }
        return max_gap;
    }
}
