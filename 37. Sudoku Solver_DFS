public class Solution {
    public void solveSudoku(char[][] board) {
        solve(board);
    }
    public boolean solve(char[][] board){
        for(int i=0; i<9; i++){
            for(int j=0; j<9; j++){
                if(board[i][j]!='.')continue;
                
                for(int m=1; m<=9; m++){
                    board[i][j]=(char)('0'+m);
                    if(validSudoku(board)&&solve(board)){
                        return true;
                    }
                    board[i][j]='.';
                }
                return false;
            }
        }
        return true;
    }
    public boolean validSudoku(char[][] board){
        //rows
        for(int i=0; i<9; i++){
            int[] table = new int[10];
            for(int j=0; j<9; j++){
                char current=board[i][j];
                if(current=='.')continue;
                if(table[current-'0']>=1){
                    return false;
                }else{
                    table[current-'0']++;
                }
            }
        }
        //col
        for(int j=0; j<9; j++){
            int[] table = new int[10];
            for(int i=0; i<9; i++){
                char current=board[i][j];
                if(current=='.')continue;
                if(table[current-'0']>=1){
                    return false;
                }else{
                    table[current-'0']++;
                }
            }
        }
        //square
        for(int i=0; i<9; i++){
            int[] table = new int[10];
            for(int j=0; j<9; j++){
                char current=board[(i/3)*3+j/3][(i%3)*3+j%3];
                if(current=='.')continue;
                if(table[current-'0']>=1){
                    return false;
                }else{
                    table[current-'0']++;
                }                
            }
        }
        return true;
    }
}
